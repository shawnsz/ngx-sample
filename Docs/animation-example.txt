
<div class="ur-header" (window:scroll)="onScroll($event)">
  <div class="urhd-top" [@SlideMove]="StsHeader"></div>
  <div class="ur-logo" [ngClass]="HeaderHeight" [@SlideMove]="StsLogo">
    <a routerLink="/"><img src="./assets/nav-bar/urtech-logo.png" alt="URTech Logo" /></a>
  </div>
  <div class="urhd-search" [@SlideMove]="StsSearch">
    <input id="urhdinput" name="urhdinput"  #urhdinput (keydown)="processEnterKey($event, urhdinput.value)" />
    <span (click)="searchAtcion(urhdinput.value)">
      <svg id="urhd-btn" fill="#000000" height="24" width="24" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
        <path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/>
        <path d="M0 0h24v24H0z" fill="none"/>
      </svg>
    </span>
  </div>

  <nav class="urhd-nav" [ngClass]="HeaderHeight" [@SlideMove]="StsNav">
    <a routerLink="/" routerLinkActive="active" [routerLinkActiveOptions]="{exact: true}">Home</a>
    <a routerLink="/about-us.html" routerLinkActive="active">About Us</a>
    <a routerLinkActive="active" class="dropdown" [ngClass]="DropdownMenu" (mouseover)="showPopMenu()" (mouseout)="hidePopMenu()">
      <div>
        Services
      </div>
      <div class="dropdown-content" (click)="hidePopMenu()">
        <a routerLink="/services/manufacturing.html">Manufacturing</a>
        <a routerLink="/services/engineering.html">Engineering</a>
        <a routerLink="/services/supply-chain.html">Supply Chain Services</a>
      </div>
    </a>
    <a routerLink="/urstart.html" routerLinkActive="active">UrStart</a>
    <a routerLink="/quality-assurance.html" routerLinkActive="active">Quality Assurance</a>
    <a routerLink="/contact-us.html" routerLinkActive="active">Contact Us</a>
  </nav>

  <div tabindex="0" class="urhd-main-menu" (click)="toggleMobileMenu()" (focusout)="disableMobileMenu(200)">
    <svg fill="#000000" height="48" viewBox="0 0 24 24" width="48" xmlns="http://www.w3.org/2000/svg">
        <path d="M0 0h24v24H0z" fill="none"/>
        <path d="M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z"/>
    </svg>
  </div>

  <div class="mobile-menu" [ngClass]="ModileMenu">
    <a routerLink="/">Home</a>
    <a  routerLink="/about-us.html">About Us</a>
    <a>
      <div>
        Services
      </div>
      <div class="mobile-second-menu">
        <a routerLink="/services/manufacturing.html">Manufacturing</a>
        <a routerLink="/services/engineering.html">Engineering</a>
        <a routerLink="/services/supply-chain.html">Supply Chain Services</a>
      </div>
    </a>
    <a routerLink="/urstart.html">UrStart</a>
    <a routerLink="/quality-assurance.html">Quality Assurance</a>
    <a routerLink="/contact-us.html">Contact Us</a>
  </div>

</div>


-----------------------------------------------------


import { Component, ViewChild, Input, OnInit, Inject, PLATFORM_ID } from '@angular/core';
import { isPlatformBrowser, isPlatformServer } from '@angular/common';
import { trigger, state, style, transition, animate } from '@angular/animations';
import {Router} from '@angular/router';

import { SiteSearchService } from '../site-search.service';

@Component({
  selector: 'urtk-nav-bar',
  templateUrl: './nav-bar.component.html',
  styleUrls: ['./nav-bar.component.css'],
  animations: [
    trigger('SlideMove', [
      state('compact-header', style({
        height: '1px'
      })),
      state('normal-header', style({
        height: '96px'
      })),
      state('compact-logo', style({
        // width:'120'
        top: '0',
        left: '16px',
        transform: 'scale(0.8,0.8)',
        color: '#000'
      })),
      state('normal-logo', style({
        // width:'200'
        top: '22px',
        left: '*',
        transform: 'none',
        color: '#fff'
      })),
      state('compact-search', style({
        display: 'none'
      })),
      state('normal-search', style({
        display: 'flex'
      })),
      state('compact-nav', style({
        top: '0',
        backgroundColor: 'rgba(255,255,255,.95)',
        justifyContent: '*',
        paddingRight: '*'
      })),
      state('normal-nav', style({
        top: '96px',
        backgroundColor: 'rgba(0,0,0,1)',
        justifyContent: 'center',
        paddingRight: '0'
      })),
      transition('compact-header => normal-header', animate('1600ms linear')),
      transition('normal-header => compact-header', animate('1600ms linear')),
      transition('compact-logo => normal-logo', animate('1600ms linear')),
      transition('normal-logo => compact-logo', animate('1600ms linear')),
      transition('compact-search => normal-search', animate('1600ms linear')),
      transition('normal-search => compact-search', animate('1600ms linear')),
      transition('compact-nav => normal-nav', animate('1600ms linear')),
      transition('normal-nav => compact-nav', animate('1600ms linear'))
    ])
  ]
})
export class NavBarComponent implements OnInit {

  // @ViewChild('focusable') vcFocusable;

  public IsPlatformBr: boolean;
  public ModileMenu: string;
  public DropdownMenu: string;
  public StsHeader: string;
  public StsLogo: string;
  public StsSearch: string;
  public StsNav: string;
  public HeaderHeight: string;
  // public urLogoLeftPosi: number;
  public SearchTxt: string;
  // public urSearchRightPosi:number;
  private subObs;

  constructor( @Inject(PLATFORM_ID) private platformId: Object, private pRouter: Router, private pSiteSearchService: SiteSearchService) {
    this.SearchTxt = '';
    this.ModileMenu = 'hideme';
    this.DropdownMenu = 'hide-menu';

    this.StsHeader = 'compact-header';
    this.StsLogo = 'compact-logo';
    this.StsSearch = 'compact-search';
    this.StsNav = 'compact-nav';
    this.HeaderHeight = 'compact';

    if (isPlatformBrowser(this.platformId)) {
      this.IsPlatformBr = true;
      if (window && window.innerWidth && window.innerWidth >= 1200) {
        this.StsHeader = 'normal-header';
        this.StsLogo = 'normal-logo';
        this.StsSearch = 'normal-search';
        this.StsNav = 'normal-nav';
        this.HeaderHeight = 'normal';
        // this.urLogoLeftPosi = 96;
        // this.urSearchRightPosi = 210;
      }
    } else if (isPlatformServer(this.platformId)) {
      this.IsPlatformBr = false;
    }

  }

  ngOnInit() {

  }

  onScroll(event) {
    // console.dir(event.target.documentElement);
    // console.log('height:'+event.target.scrollingElement.scrollTop);
    let tmpScrollEle = event.target.scrollingElement;
    if (!tmpScrollEle) { tmpScrollEle = event.target.documentElement; }
    if (tmpScrollEle) {
      let tmpScrollTop = 0;
      let tmpWindowWidth = 0;
      if (tmpScrollEle.scrollTop) { tmpScrollTop = tmpScrollEle.scrollTop; }
      if (tmpScrollEle.clientWidth) { tmpWindowWidth = tmpScrollEle.clientWidth; }
      if (tmpWindowWidth >= 1200) {
        if (tmpScrollTop > 200) {
          this.StsHeader = 'compact-header';
          this.StsLogo = 'compact-logo';
          this.StsSearch = 'compact-search';
          this.StsNav = 'compact-nav';
          this.HeaderHeight = 'compact';
        } else {
          this.StsHeader = 'normal-header';
          this.StsLogo = 'normal-logo';
          this.StsSearch = 'normal-search';
          this.StsNav = 'normal-nav';
          this.HeaderHeight = 'normal';
        }
      }
    }
  }

  showPopMenu() {
    this.DropdownMenu = 'show-menu';
  }

  hidePopMenu() {
    this.DropdownMenu = 'hide-menu';
  }

  toggleMobileMenu() {
    if (this.ModileMenu === 'hideme') {
      this.ModileMenu = 'showme';
      // this.vcFocusable.nativeElement.focus();
    } else {
      this.ModileMenu = 'hideme';
    }
  }

  disableMobileMenu(delayMs: number) {
    setTimeout(() => {
      this.ModileMenu = 'hideme';
    }, delayMs);
  }

  searchAtcion(urhdinput: string) {
    if (urhdinput) {
      this.subObs = this.pSiteSearchService.searchAction(urhdinput).subscribe(data => {
        if (data) {
          // console.info(data);
          // this.pRouter.navigateByUrl('/search-results.html?s='+urhdinput);
          this.pRouter.navigateByUrl('/search-results.html');
        } else {
          window.alert('Search Error');
        }
      });
    }
  }

  processEnterKey(eveEle, urhdinput) {
    if (eveEle.keyCode === 13) {
      this.searchAtcion(urhdinput);
    }
  }

  ngOnDestroy() {
    // clean subscription when component destroy
    if (this.subObs) {
      this.subObs.unsubscribe();
    }
  }


}
